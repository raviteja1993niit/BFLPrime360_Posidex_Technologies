#Data base Properties
database.driver=oracle.jdbc.OracleDriver
database.url=jdbc:oracle:thin:@192.168.1.148:1524:pdborcl
database.username =bajaj_intraday
database.password =EnshveFKLi0=
dbtype=1

#database.driver=oracle.jdbc.OracleDriver
#database.url =jdbc:oracle:thin:@192.168.1.6:1522:apsnacs
#database.username =ravikiran
#database.password =uh85Snm/1Ew=
#dbtype=1

#database.driver=oracle.jdbc.OracleDriver
#database.url=jdbc:oracle:thin:@192.168.1.6:1522:apsnacs
#database.username=bajaj_cdecs
#database.password=uh85Snm/1Ew=
#dbtype=1

#
#citystandardizequery=select upper(ltrim(rtrim(variation))),upper(ltrim(rtrim(standard))) from psx_file_defn_t where file_id=22 and active='Y' order by upper(ltrim(rtrim(variation)))
PinwiseAreaQuery=select upper(ltrim(rtrim(PSX_AREA))),upper(ltrim(rtrim(pin))),AREA_UNQ_ID,upper(ltrim(rtrim(org))) from psx_negativearea_base order by pin
citywiseAreaQuery=select upper(ltrim(rtrim(PSX_AREA))),upper(ltrim(rtrim(city))),AREA_UNQ_ID,upper(ltrim(rtrim(org))) from psx_negativearea_base order by city

#
MATCHED_NEGATIVE_AREA_ID_SIZE=20

#insert queries for inserting the data from DFT_TEMP to posidex tables
insertQueryCount=11
insertQuery.1=insert into PSX_CUST_DG_REQ_T (PSX_ID,CUST_ID_PART_2,CUST_ID_PART_3,CUST_TYPE_FLAG,EXTRA_NAME_1,EXTRA_NAME_2,EXTRA_NAME_3,FATHER_NAME,EXTRA_NAME_4,DOB,PAN,DRIVING_LICN_NO,CUST_ID_PART_4,VOTERID,CUST_ID,CUST_TAG_ID,EXTRA_DATE_1,EXTRA_EQ_COLUMN5,PRODUCT_FLAG,PASSPORT_NO,NAME) select REQUEST_ID,APPLN_NO,SEGMENT,APPLICANT_TYPE,FIRST_NAME,MIDDLE_NAME,LAST_NAME,FATHER_NAME,EMPOYER_NAME,DOB,PAN,DRIVING_LICENSE_NUMBER,ACCOUNT_NUMBER,VOTER_ID,CUSTOMER_NO,CUSTOMER_TYPE,DATE_OF_INCORPORATION,TAN_NO,PRODUCT,PASSPORT_NO,FIRST_NAME from dft_temp where REQUEST_ID=?
insertQuery.2=insert into PSX_CUST_ADDR_REQ_T(PSX_ID,CUST_ID_PART_2,CUST_ID_PART_3,CUST_ID_PART_4,CUST_ID,ADDRESS,AREA_VILLAGE_NAME,LANDMARK,CITY,PINCODE)select REQUEST_ID,APPLN_NO,SEGMENT,ACCOUNT_NUMBER,CUSTOMER_NO,ADDRESS_1||' '||ADDRESS_2||' '||ADDRESS_3,AREA,LANDMARK,CITY,PIN from dft_temp where REQUEST_ID=?
insertQuery.3=insert into PSX_CUST_ADDR_REQ_T(PSX_ID,CUST_ID_PART_2,CUST_ID_PART_3,CUST_ID_PART_4,CUST_ID,ADDRESS,AREA_VILLAGE_NAME,LANDMARK,CITY,PINCODE)select REQUEST_ID,APPLN_NO,SEGMENT,ACCOUNT_NUMBER,CUSTOMER_NO,ADDRESS1_OFFICE||' '||ADDRESS2_OFFICE||' '||ADDRESS3_OFFICE,AREA_OFFICE,LANDMARK_OFFICE,CITY_OFFICE,PIN_OFFICE from dft_temp where REQUEST_ID=?
insertQuery.4=insert into PSX_CUST_CONTACT_REQ_T(PSX_ID,CUST_ID_PART_2,CUST_ID_PART_3,CUST_ID_PART_4,CUST_ID,STD_CODE,PHONE)select REQUEST_ID,APPLN_NO,SEGMENT,ACCOUNT_NUMBER,CUSTOMER_NO,STD,LANDLINE_1 from dft_temp where REQUEST_ID=?
insertQuery.5=insert into PSX_CUST_CONTACT_REQ_T(PSX_ID,CUST_ID_PART_2,CUST_ID_PART_3,CUST_ID_PART_4,CUST_ID,STD_CODE,PHONE)select REQUEST_ID,APPLN_NO,SEGMENT,ACCOUNT_NUMBER,CUSTOMER_NO,STD,LANDLINE_2 from dft_temp where REQUEST_ID=?
insertQuery.6=insert into PSX_CUST_CONTACT_REQ_T(PSX_ID,CUST_ID_PART_2,CUST_ID_PART_3,CUST_ID_PART_4,CUST_ID,STD_CODE,PHONE)select REQUEST_ID,APPLN_NO,SEGMENT,ACCOUNT_NUMBER,CUSTOMER_NO,STD,MOBILE from dft_temp where REQUEST_ID=?
insertQuery.7=insert into PSX_CUST_CONTACT_REQ_T(PSX_ID,CUST_ID_PART_2,CUST_ID_PART_3,CUST_ID_PART_4,CUST_ID,STD_CODE,PHONE)select REQUEST_ID,APPLN_NO,SEGMENT,ACCOUNT_NUMBER,CUSTOMER_NO,STD_OFFICE,LANDLINE1_OFFICE from dft_temp where REQUEST_ID=?
insertQuery.8=insert into PSX_CUST_CONTACT_REQ_T(PSX_ID,CUST_ID_PART_2,CUST_ID_PART_3,CUST_ID_PART_4,CUST_ID,STD_CODE,PHONE)select REQUEST_ID,APPLN_NO,SEGMENT,ACCOUNT_NUMBER,CUSTOMER_NO,STD_OFFICE,LANDLINE2_OFFICE from dft_temp where REQUEST_ID=?
insertQuery.9=insert into PSX_CUST_CONTACT_REQ_T(PSX_ID,CUST_ID_PART_2,CUST_ID_PART_3,CUST_ID_PART_4,CUST_ID,STD_CODE,PHONE)select REQUEST_ID,APPLN_NO,SEGMENT,ACCOUNT_NUMBER,CUSTOMER_NO,STD_OFFICE,MOBILE_OFFICE from dft_temp where REQUEST_ID=?
insertQuery.10=insert into PSX_CUST_EMAIL_REQ_T(PSX_ID,CUST_ID_PART_2,CUST_ID_PART_3,CUST_ID_PART_4,CUST_ID,EMAIL_ID)select REQUEST_ID,APPLN_NO,SEGMENT,ACCOUNT_NUMBER,CUSTOMER_NO,EMAIL from dft_temp where REQUEST_ID=?
insertQuery.11=insert into PSX_CUST_EMAIL_REQ_T(PSX_ID,CUST_ID_PART_2,CUST_ID_PART_3,CUST_ID_PART_4,CUST_ID,EMAIL_ID)select REQUEST_ID,APPLN_NO,SEGMENT,ACCOUNT_NUMBER,CUSTOMER_NO,EMAIL_OFFICE from dft_temp where REQUEST_ID=?
#INSERT QUERY FOR PSX_REQUEST_T
insertQueryInputtoPSXREQUEST=insert into PSX_REQUEST_T(REQUEST_ID,REQUEST_STATUS,PSX_ID,PROFILE_ID) select REQUEST_ID,'P',REQUEST_ID,? from dft_temp where REQUEST_ID=?
#Status update query for DFT_TEMP
updateStatusQueryForInput=update DFT_TEMP set PROCESS_FLG='P' where REQUEST_ID=?

#Oracle queue dequeue procedure name
ORACLE_DEQUEUE_PROCEDURE_NAME=SFDC_REQUEST_DEQUEUE

#Request queue look up value
RequestQueue=PSX_BPM_REQ_AP_Q

#Result formatter queue look up value
ResultFormatterInputQueue=PSX.DFTRESULTS_AP.QUEUE

#Result formatter queue look up value
InterconnectivityQueue=PSX_IC_AP_Q

#Select query of result for sfdc dft temp3
#PSX_RESULTS_SELECT_QUERY=SELECT TRGCOL11,WEIGHTAGE,FLAG3,PRODUCT_FLAG,SPOUSE_NAME FROM REPORT_INPUT_OUTPUT WHERE SRCCOL11=? ORDER BY WEIGHTAGE DESC
PSX_RESULTS_SELECT_QUERY=SELECT TRGCOL11,WEIGHTAGE,RECORDTYPE,PRODUCT_FLAG,SPOUSE_NAME FROM PSX_RESULTS WHERE SRCCOL11=? ORDER BY WEIGHTAGE DESC
#PSX_RESULTS_SELECT_QUERY=SELECT TRG_PSX_ID,MATCHED_PERCENTAGE,PRODUCT_BASE,PRODUCT_FLAG,PSX_REJECT_REASON FROM REPORT_INPUT_OUTPUT WHERE REQUEST_ID=? ORDER BY MATCHED_PERCENTAGE DESC
#Reporting Results controlling count value 
MATCHED_RESULTS_MAX_COUNT=400
PSX_RESULTS_ORIGINAL_COUNT_SELECT_QUERY=SELECT MATCH_COUNT FROM PSX_REQUEST_T WHERE REQUEST_ID=?

#update query of result for sfdc dft temp
#RESULTS_UPDATE_QUERY=UPDATE DFT_TEMP SET MATCHED_ID=?,MATCHED_PERCENTAGE=?,NEGATIVE_MATCHED_ID=?,PROCESS_FLG='C',MATCHCOUNT=?,REJ_MATCHED_ID=?,REJ_MATCHED_PRCNTG=?,FRAUD_MATCHED_ID=?,FRAUD_MATCHED_PRCNTG=?,PRODUCT_CODE=substr(?,0,3999),REJ_RESASON=substr(?,0,3999),NEGATIVE_MATCH_CRITERIA=?,SERVER='PRIMARY' WHERE REQUEST_ID=?
RESULTS_UPDATE_QUERY=UPDATE DFT_TEMP SET PROCESS_FLG='C',SERVER='PRIMARY',NEGATIVE_MATCH_CRITERIA=? WHERE REQUEST_ID=?
#ERROR update query of result for sfdc dft temp
ERROR_RESULTS_UPDATE_QUERY=UPDATE DFT_TEMP SET PROCESS_FLG='E',SERVER='PRIMARY' WHERE REQUEST_ID=?

#delete query of result for sfdc dft temp
RESULTS_DELETE_QUERY=delete from  DFT_TEMP  where REQUEST_ID=?

INSERT_NEGATIVE_RESULTS=insert into PSX_NEGATIVE_RESULTS(SRC_REQUEST_ID,SRC_PSX_ID,TRG_AREA_ID,PSX_BATCH_ID) values(?,?,?,?)

UPDATE_CONTROL_TABLE=UPDATE PSX_EOD_CONTROL_T SET STATUS='C',COMPLETION_TIMESTAMP=CURRENT_TIMESTAMP WHERE PSX_BATCH_ID=?

#Thread Count
Thread_Count=6

#select query of prime match profile id for all product types
PROFILE_ID_SELECT_QUERY=SELECT PRODUCT_TYPE,PROFILE_ID FROM PRODUCT_PM_PROFILE_ID

#DFT_TEMP purpose id
Purpose_ID=29

isLogDBMSOutPutLines=true

#--------------------------------------------------------------------------------------------------------------------------
#Negative area class name
NEGATIVE_AREA_CLASS_NAME=com.posidex.resultformatter.NegativeAreaChecking.MapBasedNegativeAreaImpl
#Negative area map building query for map based approach
NEGATIVE_AREA_MAP_BUILDING_QUERY=select AREA_UNQ_ID AREA_ID,PSX_AREA,CITY,PIN from PSX_NEGATIVEAREA_BASE
#Select query for negative area checking for this aliasing with AREA,CITY,PIN is mandatory
SELECT_QUERY_NEGATIVE_AREA_CHECKING_COUNT=1
SELECT_QUERY_NEGATIVE_AREA_CHECKING.1=select AREA_VILLAGE_NAME AREA,CITY CITY,PINCODE PIN from PSX_CUST_ADDR_REQ_T WHERE PSX_ID=?

FILE_UPLOAD_NEGATIVE_AREA_REQUEST_IDS=SELECT PSX_ID,REQUEST_ID FROM PSX_CUST_DG_REQ_T WHERE PSX_BATCH_ID=?

#SELECT_QUERY_NEGATIVE_AREA_CHECKING_COUNT=2
#SELECT_QUERY_NEGATIVE_AREA_CHECKING.1=select AREA AREA,CITY CITY,PIN PIN from DFT_TEMP WHERE REQUEST_ID=?
#SELECT_QUERY_NEGATIVE_AREA_CHECKING.2=select AREA_OFFICE AREA,CITY_OFFICE CITY,PIN_OFFICE PIN from DFT_TEMP WHERE REQUEST_ID=?
#Select query of negative area checking for query based approach
SELECT_QUERY_NEGATIVE_AREA_QUERY_BASED=select AREA_UNQ_ID AREA_ID from PSX_NEGATIVEAREA_BASE where upper(trim(PSX_AREA))=upper(trim(?)) and (upper(trim(CITY))=upper(trim(?)) or upper(trim(PIN))=upper(trim(?)))

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Properties for the QI request customer status finding
UPDATE_QUERY_QI_CUSTOMER_STATUS=UPDATE PSX_REQUEST_T SET BAJAJ_CUSTOMER_STATUS=?,BAJAJ_MATCHED_APPLN_NO=?,BAJAJ_MATCHED_SEGMENT=? WHERE REQUEST_ID=?
INSERT_QUERY_QI_TARGET_CUSTOMER_STATUS=INSERT INTO PSX_QI_REQUEST_CUSTOMER_STATUS(SRC_PSX_ID,PSX_ID,SEGMENT,DEAL_ID,LAN_NO,CUSTOMER_TYPE,APPLN_NO,PRODUCT_CODE,CUSTOMER_STATUS,PROCESS_TYPE,PSX_BATCH_ID,AREA_STATUS,NEGATIVE_MATCHED_ID) values(?,?,?,?,?,?,?,?,?,?,?,?,?)

dataPullQueue=PSX.DATA.PULL_AP.QUEUE

UPDATE_SUB_SEQ_CONTROL_TABLE=UPDATE PSX_SUBSEQUENT_EOD_CONTROL_T SET STATUS='C',COMPLETION_TIMESTAMP=CURRENT_TIMESTAMP WHERE BATCHID=? AND SOURCE_TYPE=?

MAX_RESULTS_UPDATE_QUERY=UPDATE DFT_TEMP SET PROCESS_FLG='E',ERROR_DESC=? WHERE REQUEST_ID=?

#MATCHED_TARGET_ADDRESS_FOR_NEGATIVE_QUERY=SELECT A.ADDRESS AS ADDRESS,A.CITY AS CITY,A.PINCODE AS PINCODE FROM PSX_CUST_ADDR_BULK_TRG_T A,PSX_RESULTS B WHERE A.PSX_ID=B.TRGCOL11 AND B.SRCCOL11=?
MATCHED_TARGET_ADDRESS_FOR_NEGATIVE_QUERY=SELECT UPPER(ADDRESS) AS ADDRESS,UPPER(CITY) AS CITY,PINCODE AS PINCODE from PSX_CUST_ADDR_REQ_T WHERE PSX_ID=?

#Address token greater than the specified value will be passed for matching  
ADDRESS_AS_AREA_MATCHING_MIN_LENGTH=4

#Maximum address tokens that are to be considered for negative area INDIRECT matching
MAX_NUMBER_OF_TOKENS=2

CLUSTER_RESULTS_QUERY=INSERT INTO PSX_UCIN_REVERSE_FEED (CUSTOMER_NO,SEGMENT,UCIN_NO,BATCH_ID,BASE_TYPE_FLAG,PSX_BATCH_ID) SELECT A.CUST_ID,A.CUST_ID_PART_1,B.MPC,A.BATCH_ID,A.FLAG3,B.PSX_BATCH_ID FROM PSX_CUST_DG_BULK_TRG_T A,PSX_CLUSTER_CROSS_REF_T B WHERE A.PSX_ID=B.PSX_ID AND B.PSX_BATCH_ID=?

UCIN_CONTROL_T_INSERT_QUERY=INSERT INTO PSX_UCIN_CONTROL_T (PSX_BATCH_ID,STATUS) VALUES (?,'P')

UCIN_CONTROL_T_UPDATE_QUERY=UPDATE PSX_UCIN_CONTROL_T SET STATUS='C',COMPLETION_TIMESTAMP=CURRENT_TIMESTAMP WHERE UCIN_PSX_BATCH_ID=?

NEGATIVE_RESULTS_UPDATE_QUERY=UPDATE PSX_REQUEST_T SET NEGATIVE_MATCHED_ID=?,ORG=?,NEGATIVE_MATCH_CRITERIA=? WHERE PSX_ID=?

PM_BULK_QUERY_PROFILE_ID=3

FINNONE_BACKUP_INSERT_QUERY=INSERT INTO DFT_TEMP_BKP SELECT * FROM DFT_TEMP WHERE REQUEST_ID=?

PSX_HA_PURPOSE_ID=36

BULK_SUBSEQUENT_UPDATE_QUERY=UPDATE BULK_UPLOAD_SUBBATCH_CONTROL_T SET STATUS=? WHERE BATCHID=? AND SUB_BATCHID=? AND PROCESS_NAME=?

BULK_RESULTS_QUERY=INSERT INTO BULK_UPLOAD_RES_T(REQ_ID,BATCHID,APPLN_NO,SEGMENT,DEAL_ID,FIRST_NAME,MIDDLE_NAME,LAST_NAME,ADDRESS_1,ADDRESS_2,ADDRESS_3,AREA,CITY,PIN,DATE_OF_BIRTH,LANDLINE_1,LANDLINE_2,MOBILE,PAN,DRIVING_LICENSE_NUMBER,ACCOUNT_NUMBER,VOTER_ID,CREDIT_CARD_NUMBER,CUSTOMER_NO,LAN_NO,CUSTOMER_TYPE,CUSTOMER_STATUS,DATE_OF_INCORPORATION,TAN_NO,PSX_BATCH_ID,NEGATIVE_MATCHED_ID) SELECT A.SRC_REQUEST_ID,?,A.APPLN_NO,A.SEGMENT,A.DEAL_ID,A.FIRST_NAME,A.MIDDLE_NAME,A.LAST_NAME,A.ADDRESS_1,A.ADDRESS_2,A.ADDRESS_3,A.AREA,A.CITY,A.PIN,A.DOB,A.LANDLINE_1,A.LANDLINE_2,A.MOBILE,A.PAN,A.DRIVING_LICENSE_NUMBER,A.ACCOUNT_NUMBER,A.VOTER_ID,A.CREDIT_CARD_NUMBER,A.CUSTOMER_NO,A.LAN_NO,A.CUSTOMER_TYPE,B.CUSTOMER_STATUS,A.DATE_OF_INCORPORATION,A.TAN_NO,B.PSX_BATCH_ID,B.NEGATIVE_MATCHED_ID FROM FILE_UPLOAD_BULK_PM_VIEW A,PSX_QI_REQUEST_CUSTOMER_STATUS B  WHERE A.RESULT_TYPE='TRG' AND A.TRG_PSX_ID=B.PSX_ID AND A.APPLN_NO=B.APPLN_NO AND B.PSX_BATCH_ID=? ORDER BY A.APPLN_NO 

BULK_CUSTOMER_STATUS_QUERY=INSERT INTO BULK_UPLOAD_MATCH_STATUS_T (REQ_ID,BATCHID,CUSTOMER_STATUS,MATCHED_APPLN_NO,MATCHED_SEGMENT,PSX_BATCH_ID,AREA_STATUS,NEGATIVE_MATCHED_ID) SELECT REQUEST_ID,?,DECODE(BAJAJ_CUSTOMER_STATUS,NULL,'No Match',BAJAJ_CUSTOMER_STATUS)BAJAJ_CUSTOMER_STATUS,DECODE(BAJAJ_MATCHED_APPLN_NO,'No Match',NULL,BAJAJ_MATCHED_APPLN_NO) BAJAJ_MATCHED_APPLN_NO,DECODE(BAJAJ_MATCHED_SEGMENT,'No Match',NULL,BAJAJ_MATCHED_SEGMENT) BAJAJ_MATCHED_SEGMENT,PSX_BATCH_ID,CASE WHEN  NEGATIVE_MATCHED_ID='0;' THEN 'Positive' WHEN SUBSTR(NEGATIVE_MATCHED_ID,0,INSTR(NEGATIVE_MATCHED_ID,';',1)-1)>0  THEN 'Negative' WHEN NEGATIVE_MATCHED_ID='0' THEN 'No Match' END NEG_STATUS,NEGATIVE_MATCHED_ID FROM PSX_REQUEST_T WHERE PSX_BATCH_ID=?

BULK_CONTROL_UPDATE_QUERY=UPDATE BULK_UPLOAD_CONTROL_T SET STATUS=? WHERE BATCHID=?

PSX_RESPONSE_QUEUE=PSX_BPM_RES_AP_Q

ERROR_RESPONSE_QUEUE=PSX.ERROR_AP.QUEUE

LOAN_DATA_SELECTION_FOR_N_C_STATUS=SELECT SEGMENT,DEAL_ID,LAN_NO,CUSTOMER_TYPE,APPLN_NO,PRODUCT_CODE,PROCESS_TYPE FROM PSX_DEDUP_EOD_CUST_LOAN_DTL WHERE PSX_ID=?

BULK_CONTROL_CHECK_QUERY=SELECT COUNT(*) FROM BULK_UPLOAD_SUBBATCH_CONTROL_T WHERE BATCHID=? AND STATUS='E'

#Result formatter Bulk queue look up value
#RsltFrmaterBlkInputQueue=PSX.DFTRESULTSBULK_AP.QUEUE
ResultFormatterBulkInputQueue=PSX.DFTRESULTSBULK_AP.QUEUE

#Bulk Thread Count
Bulk_Thread_Count=1


#AddToTarget purpose id
addPurpose_ID=1

#Query to fetch data source mst details 
DataSource_MST_query=SELECT SOURCE_SYS_ID,SOURCE_NAME,ALLOCATE_UCIC,DAYS_TO_RETAIN,PRIORITY  FROM  PSX_DATASOURCE_MST_T where upper(SOURCE_NAME)<>'FRAUD' order by PRIORITY
#Query to fetch data source details for purging 
DataSource_MST_Purge_query=SELECT SOURCE_NAME,DAYS_TO_RETAIN  FROM  PSX_DATASOURCE_MST_T where DAYS_TO_RETAIN!=0
#Prepare purge data for respective datasources
#Purge_data_insert_query=INSERT INTO PSX_CUST_DG_STG_T (CUST_UNQ_ID,CUST_ID,DUI_FLAG,LCHG_TIME,PSX_BATCH_ID) SELECT CUST_UNQ_ID,CUST_ID,'D',SYSTIMESTAMP,'<<psxbatchid>>' FROM PSX_CUST_DG_BULK_TRG_T  WHERE UPPER(FLAG3)='<<DataSource>>' And INSERT_TS<sysdate-<<NoOfDays>>
Purge_data_insert_TRG1_query=INSERT INTO PSX_COMMON_STAGING_T_1 (CUST_UNQ_ID,CUSTOMER_ID,DUI_FLAG,LCHG_TIME,PSX_BATCH_ID) SELECT CUST_UNQ_ID,CUSTOMER_ID,'D',SYSTIMESTAMP,'<<psxbatchid>>' FROM PSX_NSP_BLK_TRG_1  WHERE UPPER(FLAG3)='<<DataSource>>' And INSERT_TS<sysdate-<<NoOfDays>>
Purge_data_insert_TRG2_query=INSERT INTO PSX_COMMON_STAGING_T_2 (CUST_UNQ_ID,CUSTOMER_ID,DUI_FLAG,LCHG_TIME,PSX_BATCH_ID) SELECT CUST_UNQ_ID,CUSTOMER_ID,'D',SYSTIMESTAMP,'<<psxbatchid>>' FROM PSX_NSP_BLK_TRG_2  WHERE UPPER(FLAG3)='<<DataSource>>' And INSERT_TS<sysdate-<<NoOfDays>>
#Query to fetch cap value
Cap_fetch_query=SELECT CAP_VALUE FROM PSX_CAP_INFO_T
#Query to fetch data count for each data source
DataSource_data_count_query=SELECT COUNT(*) CNT,SOURCE_SYSTEM FROM PSX_COMMON_STAGING_T WHERE UPPER(SOURCE_SYSTEM)<>'FRAUD' AND EOD_BATCH_ID IS NULL GROUP BY SOURCE_SYSTEM
#Check whether fraud data is available 
Fraud_Data_Check_Query=SELECT COUNT(*) from PSX_DEDUP_EOD_CUST_DEMO_DTL where EOD_BATCH_ID IS NULL AND UPPER(SOURCE_SYSTEM)='FRAUD' 


#query to fetch fraud data count 
#fraud_data_count=select count(*) from PSX_DEDUP_EOD_CUST_DEMO_DTL where EOD_BATCH_ID='<<psxbatchid>>' and upper(source_system)='FRAUD'
fraud_data_count=select count(*) from PSX_COMMON_STAGING_T where EOD_BATCH_ID='<<psxbatchid>>' and upper(source_system)='FRAUD'
#Select data from data sources to mark for Eod 
#Select_DataSource_Data_Query=SELECT CUSTOMER_ID,SOURCE_SYS_ID  FROM PSX_DEDUP_EOD_CUST_DEMO_DTL WHERE SOURCE_SYSTEM='<<datasource>>' AND EOD_BATCH_ID IS NULL ORDER BY INSERT_TS
Select_DataSource_Data_Query=SELECT CUSTOMER_NO,SOURCE_SYS_ID  FROM PSX_COMMON_STAGING_T WHERE SOURCE_SYSTEM='<<datasource>>' AND EOD_BATCH_ID IS NULL ORDER BY INSERT_TIME
#Query to insert into control table
#ControlTable_Insert_Query=insert into psx_eod_control_t (BATCH_ID ,PSX_BATCH_ID,STATUS,INSERT_TS,DATA_COUNTS ,PURPOSE_ID) values(?,?,'P',systimestamp,?,?)
ControlTable_Insert_Query=insert into psx_eod_control_t (BATCH_ID ,PSX_BATCH_ID,STATUS,INSERT_TS,DATA_COUNTS) values(?,?,'P',systimestamp,?)
#Query to mark Address data 
Addr_Data_Marking_Query=update PSX_DEDUP_EOD_CUST_ADDR_DTL set EOD_BATCH_ID='<<psxbatchid>>' where CUSTOMER_ID||'||'||SOURCE_SYS_ID in (select CUSTOMER_ID||'||'||SOURCE_SYS_ID from PSX_DEDUP_EOD_CUST_DEMO_DTL where EOD_BATCH_ID='<<psxbatchid>>')
#Query to mark loan dataTemplate_Name
Loan_Data_Marking_Query=update PSX_DEDUP_EOD_CUST_LOAN_DTL set EOD_BATCH_ID='<<psxbatchid>>' where CUSTOMER_ID||'||'||SOURCE_SYS_ID in (select CUSTOMER_ID||'||'||SOURCE_SYS_ID from PSX_DEDUP_EOD_CUST_DEMO_DTL where EOD_BATCH_ID='<<psxbatchid>>')
#Task Template name to be added at eod marker stage
Template_Name=MULTI_STAGGING_DG_TASK,MULTI_STG_ADDRALL_TASK,DEDUP_CUST_REP_TASK
    
#Queries for fraud pull
FRAUD_QUERIES_KEY=Fraud
Fraud.QUERY.COUNT=4
#Fraud.QUERY.1=update PSX_DEDUP_EOD_CUST_DEMO_DTL set EOD_BATCH_ID='<<psxbatchid>>'  where EOD_BATCH_ID is null and upper(source_system)='FRAUD'
Fraud.QUERY.1=UPDATE PSX_DEDUP_EOD_CUST_DEMO_DTL SET EOD_BATCH_ID='<<psxbatchid>>',UCIN_FLAG=(SELECT CASE WHEN ALLOCATE_UCIC='Y' THEN 'UCIN' ELSE NULL END UCIC_FLAG FROM PSX_DATASOURCE_MST_T WHERE UPPER(SOURCE_NAME)='FRAUD')  WHERE EOD_BATCH_ID IS NULL AND UPPER(SOURCE_SYSTEM)='FRAUD'
Fraud.QUERY.2=commit
Fraud.QUERY.3=INSERT INTO PSX_CUST_DG_STG_T (CUST_UNQ_ID,CUST_ID,DUI_FLAG,LCHG_TIME,PSX_BATCH_ID) SELECT CUST_UNQ_ID,CUST_ID,'D',SYSTIMESTAMP,'<<psxbatchid>>' FROM PSX_CUST_DG_BULK_TRG_T  WHERE UPPER(FLAG3)='FRAUD'
Fraud.QUERY.4=commit
#Queue name for eod marker service 
EOD_MARKER_QUEUE=PSX_EOD_MARKER_Q
#Queries for purge data preparation
PURGE_DATA_QUERIES_KEY=Purge
Purge.QUERY.COUNT=1
Purge.QUERY.1=
Report_Data_Marking_Query=update DEDUP_EOD_CUST_REP_DTL set EOD_BATCH_ID='<<psxbatchid>>' where CUSTOMER_ID||'||'||SOURCE_SYS_ID in (select CUSTOMER_ID||'||'||SOURCE_SYS_ID from PSX_DEDUP_EOD_CUST_DEMO_DTL where EOD_BATCH_ID='<<psxbatchid>>')


#Intra Purging queries
IntraDay_Purge_Key=INTRADAY.PURGE
INTRADAY.PURGE.QUERY.COUNT=15
#Update psx_batch_id for identified data for intraday purging
INTRADAY.PURGE.QUERY.1=UPDATE PSX_CUST_DG_BULK_REQ_T SET PSX_BATCH_ID=<<psxbatchid>> WHERE LCHG_TIME<(SELECT SYSDATE-DAYS_TO_RETAIN FROM PSX_DATASOURCE_MST_T WHERE SOURCE_NAME='INTRADAY')
#Inert into bkp for DG,ADDR,CONTACT,EMAIL,PRIME_MATCH_ONLINE
INTRADAY.PURGE.QUERY.2=INSERT INTO PSX_CUST_DG_BULK_REQ_T_BKP SELECT * FROM PSX_CUST_DG_BULK_REQ_T WHERE PSX_BATCH_ID=<<psxbatchid>>
INTRADAY.PURGE.QUERY.3=INSERT INTO PSX_CUST_ADDR_BULK_REQ_T_BKP SELECT A.* FROM PSX_CUST_ADDR_BULK_REQ_T A,PSX_CUST_DG_BULK_REQ_T B WHERE A.PSX_ID=B.PSX_ID AND B.PSX_BATCH_ID=<<psxbatchid>>
INTRADAY.PURGE.QUERY.4=INSERT INTO PSX_CUST_CNT_BULK_REQ_T_BKP SELECT A.* FROM PSX_CUST_CONTACT_BULK_REQ_T A,PSX_CUST_DG_BULK_REQ_T B WHERE A.PSX_ID=B.PSX_ID AND B.PSX_BATCH_ID=<<psxbatchid>>
INTRADAY.PURGE.QUERY.5=INSERT INTO PSX_CUST_EMAIL_BULK_REQ_T_BKP SELECT A.* FROM PSX_CUST_EMAIL_BULK_REQ_T A,PSX_CUST_DG_BULK_REQ_T B WHERE A.PSX_ID=B.PSX_ID AND B.PSX_BATCH_ID=<<psxbatchid>>
INTRADAY.PURGE.QUERY.6=INSERT INTO P_CDAP_PRIMEMATCH_ONLINE_BKP SELECT A.* FROM P_CDAP_PRIMEMATCH_ONLINE A,PSX_CUST_DG_BULK_REQ_T B WHERE A.COL11=B.PSX_ID AND B.PSX_BATCH_ID=<<psxbatchid>>
#Delete from ADDR,CONTACT,EMAIL,PRIME_MATCH_ONLINE
INTRADAY.PURGE.QUERY.7=DELETE FROM PSX_CUST_ADDR_BULK_REQ_T WHERE PSX_ID IN (SELECT PSX_ID FROM PSX_CUST_DG_BULK_REQ_T WHERE PSX_BATCH_ID=<<psxbatchid>>)
INTRADAY.PURGE.QUERY.8=DELETE FROM PSX_CUST_CONTACT_BULK_REQ_T WHERE PSX_ID IN (SELECT PSX_ID FROM PSX_CUST_DG_BULK_REQ_T WHERE PSX_BATCH_ID=<<psxbatchid>>)
INTRADAY.PURGE.QUERY.9=DELETE FROM PSX_CUST_EMAIL_BULK_REQ_T WHERE PSX_ID IN (SELECT PSX_ID FROM PSX_CUST_DG_BULK_REQ_T WHERE PSX_BATCH_ID=<<psxbatchid>>)
INTRADAY.PURGE.QUERY.10=DELETE FROM P_CDAP_PRIMEMATCH_ONLINE WHERE COL11 IN (SELECT PSX_ID FROM PSX_CUST_DG_BULK_REQ_T WHERE PSX_BATCH_ID=<<psxbatchid>>)
INTRADAY.PURGE.QUERY.11=DELETE FROM PSX_CUST_DG_STG_T WHERE CUST_UNQ_ID IN (SELECT CUST_UNQ_ID FROM PSX_CUST_DG_BULK_REQ_T WHERE PSX_BATCH_ID=<<psxbatchid>>)
INTRADAY.PURGE.QUERY.12=DELETE FROM PSX_CUST_ADDR_STG_T WHERE CUST_UNQ_ID IN (SELECT CUST_UNQ_ID FROM PSX_CUST_DG_BULK_REQ_T WHERE PSX_BATCH_ID=<<psxbatchid>>)
INTRADAY.PURGE.QUERY.13=DELETE FROM PSX_CUST_CONTACT_STG_T WHERE CUST_UNQ_ID IN (SELECT CUST_UNQ_ID FROM PSX_CUST_DG_BULK_REQ_T WHERE PSX_BATCH_ID=<<psxbatchid>>)
INTRADAY.PURGE.QUERY.14=DELETE FROM PSX_CUST_EMAIL_STG_T WHERE CUST_UNQ_ID IN (SELECT CUST_UNQ_ID FROM PSX_CUST_DG_BULK_REQ_T WHERE PSX_BATCH_ID=<<psxbatchid>>)
#Delete from DG_BULK_REQ
INTRADAY.PURGE.QUERY.15=DELETE FROM PSX_CUST_DG_BULK_REQ_T WHERE PSX_BATCH_ID=<<psxbatchid>>


BULK_QUERY_RULES_TO_PROCESS=,0,

BUILD_CONTACT_WM_TABLE.QUERY.COUNT=3
BUILD_CONTACT_WM_TABLE.QUERY.1=DROP TABLE PSX_CONTACT_BULK_WM_CONCAT_T PURGE
BUILD_CONTACT_WM_TABLE.QUERY.2=CREATE TABLE PSX_CONTACT_BULK_WM_CONCAT_T AS SELECT PSX_ID,TO_CHAR(WM_CONCAT(PHONE)) PHONE FROM PSX_CUST_CONTACT_BULK_TRG_T GROUP BY PSX_ID
BUILD_CONTACT_WM_TABLE.QUERY.3=CREATE INDEX IDX_PSXID_CNT_WMCNCT ON PSX_CONTACT_BULK_WM_CONCAT_T(PSX_ID) COMPUTE STATISTICS


BACKUP_TABLE_N_UPDATE.QUERY.COUNT=4
BACKUP_TABLE_N_UPDATE.QUERY.1=INSERT INTO RES_SM_STRENGTHS_BKP SELECT * FROM RES_SM_STRENGTHS
BACKUP_TABLE_N_UPDATE.QUERY.2=COMMIT
BACKUP_TABLE_N_UPDATE.QUERY.3=UPDATE PSX_UCIN_REPROCESS_BATCHID SET STATUS='C' WHERE PSX_BATCH_ID=<<psxbatchid>>
BACKUP_TABLE_N_UPDATE.QUERY.4=COMMIT



